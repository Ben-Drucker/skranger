name: build wheels

on:
  push:
    branches:
      - master
  release:
    types:
      - published
  pull_request:
    branches:
      - master

jobs:
  build_wheels:
    name: build ${{ matrix.py }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-12]
        py: ["cp38-*", "cp39-*", "cp310-*", "cp311-*"]

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.12.3
      env:
        CIBW_BUILD: ${{ matrix.py }}
        CIBW_BUILD_FRONTEND: "pip"
        CIBW_ARCHS_LINUX: auto64
        CIBW_ARCHS_WINDOWS: auto64
        CIBW_ARCHS_MACOS: x86_64 # universal2 arm64
        CIBW_ENVIRONMENT_MACOS: SYSTEM_VERSION_COMPAT=0  # https://github.com/pypa/cibuildwheel/issues/1410#issuecomment-1425627829
        CIBW_SKIP: "*musl*"
        CIBW_BEFORE_ALL: python -m pip install -U pip && python buildpre.py
        CIBW_BEFORE_TEST: python -m pip install -U pip
        CIBW_TEST_COMMAND: python -c "import skranger; print(skranger.__version__); from skranger.ranger import ranger"
        # can build but not test m1 builds
        CIBW_TEST_SKIP: "*-macosx_arm64 *_universal2:arm64"
        # unsure how to make this work with manylinux wheels so just don't make them
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: ""
        CIBW_BUILD_VERBOSITY: 3

    - name: Show wheelhouse
      run: |
        ls wheelhouse

    - uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: wheelhouse

    - name: Set up python
      id: setup-python
      if: github.event_name == 'release' && github.event.action == 'published'
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Publish on tag
      if: github.event_name == 'release' && github.event.action == 'published'
      env:
        TWINE_USERNAME: crflynn
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      run: |
        pip install --upgrade twine
        twine upload wheelhouse/*.whl

  build_sdist:
    name: build sdist
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Set up python
      id: setup-python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.py }}

    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.4.2
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Create sdist
      run: |
        poetry run python buildpre.py
        poetry build -f sdist

    - name: Show dist
      run: |
        ls dist

    - name: Publish on tag
      if: github.event_name == 'release' && github.event.action == 'published'
      env:
        TWINE_USERNAME: crflynn
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      run: |
        pip install --upgrade twine
        twine upload dist/*.tar.gz
